// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import type {
  AuthenticationActivateReadData,
  AuthenticationActivateReadError,
  AuthenticationActivateReadResponse,
  AuthenticationGoogleAccountInfoListError,
  AuthenticationGoogleAccountInfoListResponse,
  AuthenticationLoginCreateData,
  AuthenticationLoginCreateError,
  AuthenticationLoginCreateResponse,
  AuthenticationRegisterCreateData,
  AuthenticationRegisterCreateError,
  AuthenticationRegisterCreateResponse,
  AuthenticationResetPasswordConfirmData,
  AuthenticationResetPasswordConfirmError,
  AuthenticationResetPasswordConfirmResponse,
  AuthenticationResetPasswordData,
  AuthenticationResetPasswordError,
  AuthenticationResetPasswordResponse,
  AuthenticationTokenRefreshCreateData,
  AuthenticationTokenRefreshCreateError,
  AuthenticationTokenRefreshCreateResponse,
  CustomAdminCompetitionsTypeListError,
  CustomAdminCompetitionsTypeListResponse,
  CustomAdminCompetitionsTypeCreateData,
  CustomAdminCompetitionsTypeCreateError,
  CustomAdminCompetitionsTypeCreateResponse,
  CustomAdminCompetitionsTypeReadData,
  CustomAdminCompetitionsTypeReadError,
  CustomAdminCompetitionsTypeReadResponse,
  CustomAdminCompetitionsTypeUpdateData,
  CustomAdminCompetitionsTypeUpdateError,
  CustomAdminCompetitionsTypeUpdateResponse,
  CustomAdminCompetitionsTypePartialUpdateData,
  CustomAdminCompetitionsTypePartialUpdateError,
  CustomAdminCompetitionsTypePartialUpdateResponse,
  CustomAdminCompetitionsTypeDeleteData,
  CustomAdminCompetitionsTypeDeleteError,
  CustomAdminCompetitionsTypeDeleteResponse,
  CustomAdminEventUpdateStatusCreateData,
  CustomAdminEventUpdateStatusCreateError,
  CustomAdminEventUpdateStatusCreateResponse,
  CustomAdminEventsUpdateStatusRequestsListError,
  CustomAdminEventsUpdateStatusRequestsListResponse,
  CustomAdminOrganizerRequestsListError,
  CustomAdminOrganizerRequestsListResponse,
  CustomAdminUserApproveOrganizerCreateData,
  CustomAdminUserApproveOrganizerCreateError,
  CustomAdminUserApproveOrganizerCreateResponse,
  OrganizationListError,
  OrganizationListResponse,
  OrganizationCreateData,
  OrganizationCreateError,
  OrganizationCreateResponse,
  OrganizationReadData,
  OrganizationReadError,
  OrganizationReadResponse,
  OrganizationUpdateData,
  OrganizationUpdateError,
  OrganizationUpdateResponse,
  OrganizationPartialUpdateData,
  OrganizationPartialUpdateError,
  OrganizationPartialUpdateResponse,
  OrganizationDeleteData,
  OrganizationDeleteError,
  OrganizationDeleteResponse,
  OrganizationEventListData,
  OrganizationEventListError,
  OrganizationEventListResponse,
  OrganizationEventCreateData,
  OrganizationEventCreateError,
  OrganizationEventCreateResponse,
  OrganizationEventReadData,
  OrganizationEventReadError,
  OrganizationEventReadResponse,
  OrganizationEventUpdateData,
  OrganizationEventUpdateError,
  OrganizationEventUpdateResponse,
  OrganizationEventPartialUpdateData,
  OrganizationEventPartialUpdateError,
  OrganizationEventPartialUpdateResponse,
  OrganizationEventDeleteData,
  OrganizationEventDeleteError,
  OrganizationEventDeleteResponse,
  OrganizationInviteOrganizerCreateData,
  OrganizationInviteOrganizerCreateError,
  OrganizationInviteOrganizerCreateResponse,
  UserDistanceRegisterCreateData,
  UserDistanceRegisterCreateError,
  UserDistanceRegisterCreateResponse,
  UserEventsLikeCreateData,
  UserEventsLikeCreateError,
  UserEventsLikeCreateResponse,
  UserEventsLikeDeleteData,
  UserEventsLikeDeleteError,
  UserEventsLikeDeleteResponse,
  UserProfileListError,
  UserProfileListResponse,
  UserProfileUpdateData,
  UserProfileUpdateError,
  UserProfileUpdateResponse,
  UserProfilePartialUpdateData,
  UserProfilePartialUpdateError,
  UserProfilePartialUpdateResponse,
  UserProfileAdditionalProfilesListError,
  UserProfileAdditionalProfilesListResponse,
  UserProfileAdditionalProfilesCreateData,
  UserProfileAdditionalProfilesCreateError,
  UserProfileAdditionalProfilesCreateResponse,
  UserProfileAdditionalProfilesReadData,
  UserProfileAdditionalProfilesReadError,
  UserProfileAdditionalProfilesReadResponse,
  UserProfileAdditionalProfilesUpdateData,
  UserProfileAdditionalProfilesUpdateError,
  UserProfileAdditionalProfilesUpdateResponse,
  UserProfileAdditionalProfilesDeleteData,
  UserProfileAdditionalProfilesDeleteError,
  UserProfileAdditionalProfilesDeleteResponse,
  UserProfileEventsLikedListError,
  UserProfileEventsLikedListResponse,
  UserPublicEventListError,
  UserPublicEventListResponse,
  UserPublicEventFilterListData,
  UserPublicEventFilterListError,
  UserPublicEventFilterListResponse,
  UserPublicEventReadData,
  UserPublicEventReadError,
  UserPublicEventReadResponse,
  UserRequestOrganizerCreateError,
  UserRequestOrganizerCreateResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Activate user by email
 */
export const authenticationActivateRead = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthenticationActivateReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuthenticationActivateReadResponse,
    AuthenticationActivateReadError,
    ThrowOnError
  >({
    ...options,
    url: "/authentication/activate/{uid}/{token}/",
  });
};

export const authenticationGoogleAccountInfoList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuthenticationGoogleAccountInfoListResponse,
    AuthenticationGoogleAccountInfoListError,
    ThrowOnError
  >({
    ...options,
    url: "/authentication/google-account-info/",
  });
};

/**
 * Login with JWT token
 */
export const authenticationLoginCreate = <ThrowOnError extends boolean = false>(
  options: Options<AuthenticationLoginCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthenticationLoginCreateResponse,
    AuthenticationLoginCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/authentication/login/",
  });
};

/**
 * Register user with email and password
 */
export const authenticationRegisterCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthenticationRegisterCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthenticationRegisterCreateResponse,
    AuthenticationRegisterCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/authentication/register/",
  });
};

/**
 * Confirm and reset the user password.
 */
export const authenticationResetPasswordConfirm = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthenticationResetPasswordConfirmData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthenticationResetPasswordConfirmResponse,
    AuthenticationResetPasswordConfirmError,
    ThrowOnError
  >({
    ...options,
    url: "/authentication/reset-password-confirm/",
  });
};

/**
 * Request a password reset email.
 */
export const authenticationResetPassword = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthenticationResetPasswordData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthenticationResetPasswordResponse,
    AuthenticationResetPasswordError,
    ThrowOnError
  >({
    ...options,
    url: "/authentication/reset-password/",
  });
};

/**
 * Takes a refresh type JSON web token and returns an access type JSON web
 * token if the refresh token is valid.
 */
export const authenticationTokenRefreshCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthenticationTokenRefreshCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthenticationTokenRefreshCreateResponse,
    AuthenticationTokenRefreshCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/authentication/token/refresh/",
  });
};

/**
 * Get an Competition Type
 */
export const customAdminCompetitionsTypeList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CustomAdminCompetitionsTypeListResponse,
    CustomAdminCompetitionsTypeListError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/competitions-type/",
  });
};

/**
 * Create a new Competition Type.
 */
export const customAdminCompetitionsTypeCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CustomAdminCompetitionsTypeCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CustomAdminCompetitionsTypeCreateResponse,
    CustomAdminCompetitionsTypeCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/competitions-type/",
  });
};

/**
 * Get an Competition Type
 */
export const customAdminCompetitionsTypeRead = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CustomAdminCompetitionsTypeReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CustomAdminCompetitionsTypeReadResponse,
    CustomAdminCompetitionsTypeReadError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/competitions-type/{id}/",
  });
};

/**
 * Update Competition Type
 */
export const customAdminCompetitionsTypeUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CustomAdminCompetitionsTypeUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    CustomAdminCompetitionsTypeUpdateResponse,
    CustomAdminCompetitionsTypeUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/competitions-type/{id}/",
  });
};

/**
 * Partial update Competition Type
 */
export const customAdminCompetitionsTypePartialUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CustomAdminCompetitionsTypePartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    CustomAdminCompetitionsTypePartialUpdateResponse,
    CustomAdminCompetitionsTypePartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/competitions-type/{id}/",
  });
};

/**
 * Delete an additional profile
 */
export const customAdminCompetitionsTypeDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CustomAdminCompetitionsTypeDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    CustomAdminCompetitionsTypeDeleteResponse,
    CustomAdminCompetitionsTypeDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/competitions-type/{id}/",
  });
};

/**
 * Update the status of an event by its ID.
 */
export const customAdminEventUpdateStatusCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CustomAdminEventUpdateStatusCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CustomAdminEventUpdateStatusCreateResponse,
    CustomAdminEventUpdateStatusCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/event/{event_id}/update-status/",
  });
};

/**
 * Retrieve all events with status "pending".
 */
export const customAdminEventsUpdateStatusRequestsList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CustomAdminEventsUpdateStatusRequestsListResponse,
    CustomAdminEventsUpdateStatusRequestsListError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/events/update-status-requests/",
  });
};

/**
 * Retrieve all pending organizer requests.
 */
export const customAdminOrganizerRequestsList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CustomAdminOrganizerRequestsListResponse,
    CustomAdminOrganizerRequestsListError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/organizer-requests/",
  });
};

/**
 * Approve Organizer
 */
export const customAdminUserApproveOrganizerCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CustomAdminUserApproveOrganizerCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CustomAdminUserApproveOrganizerCreateResponse,
    CustomAdminUserApproveOrganizerCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/user/{user_id}/approve-organizer/",
  });
};

/**
 * Retrieve the details of an event organizer by event_id. The event_id is used to find the organizer associated with a specific event.
 */
export const organizationList = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizationListResponse,
    OrganizationListError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/",
  });
};

/**
 * Update the details of an event organizer by event_id. The event_id is used to find the organizer, and the request body contains the updated information about the organizer.
 */
export const organizationCreate = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    OrganizationCreateResponse,
    OrganizationCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/",
  });
};

/**
 * Retrieve the details of an event organizer by event_id. The event_id is used to find the organizer associated with a specific event.
 */
export const organizationRead = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizationReadResponse,
    OrganizationReadError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/",
  });
};

/**
 * Update the details of an event organizer by event_id. The event_id is used to find the organizer, and the request body contains the updated information about the organizer.
 */
export const organizationUpdate = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    OrganizationUpdateResponse,
    OrganizationUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/",
  });
};

/**
 * Partially update an event organizer by event_id. Only the fields provided in the request body will be updated.
 */
export const organizationPartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationPartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    OrganizationPartialUpdateResponse,
    OrganizationPartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/",
  });
};

/**
 * Delete an event organizer by event_id. The event_id is used to find and delete the organizer associated with a specific event.
 */
export const organizationDelete = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    OrganizationDeleteResponse,
    OrganizationDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/",
  });
};

/**
 * Retrieve event details by ID.
 */
export const organizationEventList = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationEventListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizationEventListResponse,
    OrganizationEventListError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/",
  });
};

/**
 * Create a new event with all related details including organizer, additional items, and distances.
 */
export const organizationEventCreate = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationEventCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    OrganizationEventCreateResponse,
    OrganizationEventCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/",
  });
};

/**
 * Retrieve event details by ID.
 */
export const organizationEventRead = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationEventReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizationEventReadResponse,
    OrganizationEventReadError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/{event_id}/",
  });
};

/**
 * Update event details without organizer, additional_items, or distances fields.
 */
export const organizationEventUpdate = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationEventUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    OrganizationEventUpdateResponse,
    OrganizationEventUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/{event_id}/",
  });
};

/**
 * Partially update event details without organizer, additional_items, or distances fields.
 */
export const organizationEventPartialUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizationEventPartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    OrganizationEventPartialUpdateResponse,
    OrganizationEventPartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/{event_id}/",
  });
};

/**
 * Delete an event by ID.
 */
export const organizationEventDelete = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationEventDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    OrganizationEventDeleteResponse,
    OrganizationEventDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/{event_id}/",
  });
};

/**
 * Update the details of an event organizer by event_id. The event_id is used to find the organizer, and the request body contains the updated information about the organizer.
 */
export const organizationInviteOrganizerCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizationInviteOrganizerCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    OrganizationInviteOrganizerCreateResponse,
    OrganizationInviteOrganizerCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/invite-organizer/",
  });
};

/**
 * User Distance Registration
 */
export const userDistanceRegisterCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserDistanceRegisterCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UserDistanceRegisterCreateResponse,
    UserDistanceRegisterCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/distance/{distance_id}/register/",
  });
};

/**
 * Like an event by its ID
 */
export const userEventsLikeCreate = <ThrowOnError extends boolean = false>(
  options: Options<UserEventsLikeCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UserEventsLikeCreateResponse,
    UserEventsLikeCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/events/{event_id}/like/",
  });
};

/**
 * Unlike an event by its ID
 */
export const userEventsLikeDelete = <ThrowOnError extends boolean = false>(
  options: Options<UserEventsLikeDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    UserEventsLikeDeleteResponse,
    UserEventsLikeDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/user/events/{event_id}/like/",
  });
};

/**
 * Get user profile data
 */
export const userProfileList = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserProfileListResponse,
    UserProfileListError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/",
  });
};

/**
 * Update user profile data
 */
export const userProfileUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UserProfileUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UserProfileUpdateResponse,
    UserProfileUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/",
  });
};

/**
 * Partial update of user profile data
 */
export const userProfilePartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UserProfilePartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    UserProfilePartialUpdateResponse,
    UserProfilePartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/",
  });
};

/**
 * Get a list of additional profiles
 */
export const userProfileAdditionalProfilesList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserProfileAdditionalProfilesListResponse,
    UserProfileAdditionalProfilesListError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/additional-profiles/",
  });
};

/**
 * Create an additional profile
 */
export const userProfileAdditionalProfilesCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserProfileAdditionalProfilesCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UserProfileAdditionalProfilesCreateResponse,
    UserProfileAdditionalProfilesCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/additional-profiles/",
  });
};

/**
 * Get an additional profile
 */
export const userProfileAdditionalProfilesRead = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserProfileAdditionalProfilesReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserProfileAdditionalProfilesReadResponse,
    UserProfileAdditionalProfilesReadError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/additional-profiles/{id}/",
  });
};

/**
 * Update an additional profile
 */
export const userProfileAdditionalProfilesUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserProfileAdditionalProfilesUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UserProfileAdditionalProfilesUpdateResponse,
    UserProfileAdditionalProfilesUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/additional-profiles/{id}/",
  });
};

/**
 * Delete an additional profile
 */
export const userProfileAdditionalProfilesDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserProfileAdditionalProfilesDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    UserProfileAdditionalProfilesDeleteResponse,
    UserProfileAdditionalProfilesDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/additional-profiles/{id}/",
  });
};

/**
 * Retrieve a list of liked events
 */
export const userProfileEventsLikedList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserProfileEventsLikedListResponse,
    UserProfileEventsLikedListError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/events/liked/",
  });
};

/**
 * Retrieve detailed information list event
 */
export const userPublicEventList = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserPublicEventListResponse,
    UserPublicEventListError,
    ThrowOnError
  >({
    ...options,
    url: "/user/public-event/",
  });
};

/**
 * Filtering events by competition type, name, location, distance, and date range
 */
export const userPublicEventFilterList = <ThrowOnError extends boolean = false>(
  options?: Options<UserPublicEventFilterListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserPublicEventFilterListResponse,
    UserPublicEventFilterListError,
    ThrowOnError
  >({
    ...options,
    url: "/user/public-event/filter/",
  });
};

/**
 * Retrieve detailed information about a specific event by its ID.
 */
export const userPublicEventRead = <ThrowOnError extends boolean = false>(
  options: Options<UserPublicEventReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserPublicEventReadResponse,
    UserPublicEventReadError,
    ThrowOnError
  >({
    ...options,
    url: "/user/public-event/{event_id}/",
  });
};

/**
 * Request Organizer
 */
export const userRequestOrganizerCreate = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UserRequestOrganizerCreateResponse,
    UserRequestOrganizerCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/request-organizer/",
  });
};
