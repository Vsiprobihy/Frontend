// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import type {
  AuthGoogleAccountInfoListError,
  AuthGoogleAccountInfoListResponse,
  AuthLoginCreateData,
  AuthLoginCreateError,
  AuthLoginCreateResponse,
  AuthProfileListError,
  AuthProfileListResponse,
  AuthProfileUpdateData,
  AuthProfileUpdateError,
  AuthProfileUpdateResponse,
  AuthProfilePartialUpdateData,
  AuthProfilePartialUpdateError,
  AuthProfilePartialUpdateResponse,
  AuthProfileAdditionalProfilesListError,
  AuthProfileAdditionalProfilesListResponse,
  AuthProfileAdditionalProfilesCreateData,
  AuthProfileAdditionalProfilesCreateError,
  AuthProfileAdditionalProfilesCreateResponse,
  AuthProfileAdditionalProfilesReadData,
  AuthProfileAdditionalProfilesReadError,
  AuthProfileAdditionalProfilesReadResponse,
  AuthProfileAdditionalProfilesUpdateData,
  AuthProfileAdditionalProfilesUpdateError,
  AuthProfileAdditionalProfilesUpdateResponse,
  AuthProfileAdditionalProfilesDeleteData,
  AuthProfileAdditionalProfilesDeleteError,
  AuthProfileAdditionalProfilesDeleteResponse,
  AuthProfileUploadAvatarUpdateData,
  AuthProfileUploadAvatarUpdateError,
  AuthProfileUploadAvatarUpdateResponse,
  AuthProfileUploadAvatarPartialUpdateData,
  AuthProfileUploadAvatarPartialUpdateError,
  AuthProfileUploadAvatarPartialUpdateResponse,
  AuthRegisterCreateData,
  AuthRegisterCreateError,
  AuthRegisterCreateResponse,
  AuthTokenRefreshCreateData,
  AuthTokenRefreshCreateError,
  AuthTokenRefreshCreateResponse,
  CalendarFilterListData,
  CalendarFilterListError,
  CalendarFilterListResponse,
  EventEventsReadData,
  EventEventsReadError,
  EventEventsReadResponse,
  OrganizerAdditionalItemsReadData,
  OrganizerAdditionalItemsReadError,
  OrganizerAdditionalItemsReadResponse,
  OrganizerAdditionalItemsCreateData,
  OrganizerAdditionalItemsCreateError,
  OrganizerAdditionalItemsCreateResponse,
  OrganizerAdditionalItemsUpdateData,
  OrganizerAdditionalItemsUpdateError,
  OrganizerAdditionalItemsUpdateResponse,
  OrganizerAdditionalItemsPartialUpdateData,
  OrganizerAdditionalItemsPartialUpdateError,
  OrganizerAdditionalItemsPartialUpdateResponse,
  OrganizerAdditionalItemsDeleteData,
  OrganizerAdditionalItemsDeleteError,
  OrganizerAdditionalItemsDeleteResponse,
  OrganizerDistancesReadData,
  OrganizerDistancesReadError,
  OrganizerDistancesReadResponse,
  OrganizerDistancesCreateData,
  OrganizerDistancesCreateError,
  OrganizerDistancesCreateResponse,
  OrganizerDistancesUpdateData,
  OrganizerDistancesUpdateError,
  OrganizerDistancesUpdateResponse,
  OrganizerDistancesPartialUpdateData,
  OrganizerDistancesPartialUpdateError,
  OrganizerDistancesPartialUpdateResponse,
  OrganizerDistancesDeleteData,
  OrganizerDistancesDeleteError,
  OrganizerDistancesDeleteResponse,
  OrganizerEventsCreateData,
  OrganizerEventsCreateError,
  OrganizerEventsCreateResponse,
  OrganizerEventsReadData,
  OrganizerEventsReadError,
  OrganizerEventsReadResponse,
  OrganizerEventsUpdateData,
  OrganizerEventsUpdateError,
  OrganizerEventsUpdateResponse,
  OrganizerEventsPartialUpdateData,
  OrganizerEventsPartialUpdateError,
  OrganizerEventsPartialUpdateResponse,
  OrganizerEventsDeleteData,
  OrganizerEventsDeleteError,
  OrganizerEventsDeleteResponse,
  OrganizerInviteModeratorCreateData,
  OrganizerInviteModeratorCreateError,
  OrganizerInviteModeratorCreateResponse,
  OrganizerOrganizerEventsListError,
  OrganizerOrganizerEventsListResponse,
  OrganizerOrganizerEventsCreateData,
  OrganizerOrganizerEventsCreateError,
  OrganizerOrganizerEventsCreateResponse,
  OrganizerOrganizerEventsReadData,
  OrganizerOrganizerEventsReadError,
  OrganizerOrganizerEventsReadResponse,
  OrganizerOrganizerEventsUpdateData,
  OrganizerOrganizerEventsUpdateError,
  OrganizerOrganizerEventsUpdateResponse,
  OrganizerOrganizerEventsPartialUpdateData,
  OrganizerOrganizerEventsPartialUpdateError,
  OrganizerOrganizerEventsPartialUpdateResponse,
  OrganizerOrganizerEventsDeleteData,
  OrganizerOrganizerEventsDeleteError,
  OrganizerOrganizerEventsDeleteResponse,
  RegisterUserForEventData,
  RegisterUserForEventError,
  RegisterUserForEventResponse,
  GetEventRegistrationData,
  GetEventRegistrationError,
  GetEventRegistrationResponse,
  UpdateEventRegistrationData,
  UpdateEventRegistrationError,
  UpdateEventRegistrationResponse,
  PartialUpdateEventRegistrationData,
  PartialUpdateEventRegistrationError,
  PartialUpdateEventRegistrationResponse,
  DeleteEventRegistrationData,
  DeleteEventRegistrationError,
  DeleteEventRegistrationResponse,
  UpcomingEventsListData,
  UpcomingEventsListError,
  UpcomingEventsListResponse,
  UserUserInfoListError,
  UserUserInfoListResponse,
} from "./types.gen";

export const client = createClient(createConfig());

export const authGoogleAccountInfoList = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuthGoogleAccountInfoListResponse,
    AuthGoogleAccountInfoListError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/google-account-info/",
  });
};

/**
 * Login with JWT token
 */
export const authLoginCreate = <ThrowOnError extends boolean = false>(
  options: Options<AuthLoginCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthLoginCreateResponse,
    AuthLoginCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/login/",
  });
};

/**
 * Get user profile data
 */
export const authProfileList = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  const token = Cookies.get("authToken");
  return (options?.client ?? client).get<
    AuthProfileListResponse,
    AuthProfileListError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/profile/",
    headers: {
      Authorization: `Bearer ${token}`,
      ...options?.headers,
    },
  });
};

/**
 * Update user profile data
 */
export const authProfileUpdate = <ThrowOnError extends boolean = false>(
  options: Options<AuthProfileUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    AuthProfileUpdateResponse,
    AuthProfileUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/profile/",
  });
};

/**
 * Partial update of user profile data
 */
export const authProfilePartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<AuthProfilePartialUpdateData, ThrowOnError>
) => {
  const token = Cookies.get("authToken");
  return (options?.client ?? client).patch<
    AuthProfilePartialUpdateResponse,
    AuthProfilePartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/profile/",
    headers: {
      Authorization: `Bearer ${token}`,
      ...options?.headers,
    },
  });
};

/**
 * Get a list of additional profiles
 */
export const authProfileAdditionalProfilesList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuthProfileAdditionalProfilesListResponse,
    AuthProfileAdditionalProfilesListError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/profile/additional_profiles/",
  });
};

/**
 * Create an additional profile
 */
export const authProfileAdditionalProfilesCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthProfileAdditionalProfilesCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthProfileAdditionalProfilesCreateResponse,
    AuthProfileAdditionalProfilesCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/profile/additional_profiles/",
  });
};

/**
 * Get an additional profile
 */
export const authProfileAdditionalProfilesRead = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthProfileAdditionalProfilesReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuthProfileAdditionalProfilesReadResponse,
    AuthProfileAdditionalProfilesReadError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/profile/additional_profiles/{profile_id}/",
  });
};

/**
 * Update an additional profile
 */
export const authProfileAdditionalProfilesUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthProfileAdditionalProfilesUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    AuthProfileAdditionalProfilesUpdateResponse,
    AuthProfileAdditionalProfilesUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/profile/additional_profiles/{profile_id}/",
  });
};

/**
 * Delete an additional profile
 */
export const authProfileAdditionalProfilesDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthProfileAdditionalProfilesDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    AuthProfileAdditionalProfilesDeleteResponse,
    AuthProfileAdditionalProfilesDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/profile/additional_profiles/{profile_id}/",
  });
};

/**
 * Upload user avatar using PUT method.
 */
export const authProfileUploadAvatarUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthProfileUploadAvatarUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    AuthProfileUploadAvatarUpdateResponse,
    AuthProfileUploadAvatarUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/profile/upload-avatar/",
  });
};

/**
 * Upload user avatar using PATCH method.
 */
export const authProfileUploadAvatarPartialUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthProfileUploadAvatarPartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    AuthProfileUploadAvatarPartialUpdateResponse,
    AuthProfileUploadAvatarPartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/profile/upload-avatar/",
  });
};

/**
 * API view for user registration.
 * This view allows new users to register and generates access and refresh tokens
 * upon successful registration.
 */
export const authRegisterCreate = <ThrowOnError extends boolean = false>(
  options: Options<AuthRegisterCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthRegisterCreateResponse,
    AuthRegisterCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/register/",
  });
};

/**
 * Takes a refresh type JSON web token and returns an access type JSON web
 * token if the refresh token is valid.
 */
export const authTokenRefreshCreate = <ThrowOnError extends boolean = false>(
  options: Options<AuthTokenRefreshCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthTokenRefreshCreateResponse,
    AuthTokenRefreshCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/token/refresh/",
  });
};

/**
 * Filtering events by competition type, name, month, year, location, and distance
 */
export const calendarFilterList = <ThrowOnError extends boolean = false>(
  options?: Options<CalendarFilterListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CalendarFilterListResponse,
    CalendarFilterListError,
    ThrowOnError
  >({
    ...options,
    url: "/calendar/filter/",
  });
};

export const eventEventsRead = <ThrowOnError extends boolean = false>(
  options: Options<EventEventsReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    EventEventsReadResponse,
    EventEventsReadError,
    ThrowOnError
  >({
    ...options,
    url: "/event/events/{id}/",
  });
};

/**
 * Retrieve details of additional items for an event by ID.
 */
export const organizerAdditionalItemsRead = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizerAdditionalItemsReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizerAdditionalItemsReadResponse,
    OrganizerAdditionalItemsReadError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/additional-items/{event_id}/",
  });
};

/**
 * Add additional items (e.g., T-shirt, Medal) for an event.
 */
export const organizerAdditionalItemsCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizerAdditionalItemsCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    OrganizerAdditionalItemsCreateResponse,
    OrganizerAdditionalItemsCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/additional-items/{event_id}/",
  });
};

/**
 * Update additional items for an event by ID and Event_ID.
 */
export const organizerAdditionalItemsUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizerAdditionalItemsUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    OrganizerAdditionalItemsUpdateResponse,
    OrganizerAdditionalItemsUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/additional-items/{event_id}/",
  });
};

/**
 * Partial update of additional items for an event by ID.
 */
export const organizerAdditionalItemsPartialUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizerAdditionalItemsPartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    OrganizerAdditionalItemsPartialUpdateResponse,
    OrganizerAdditionalItemsPartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/additional-items/{event_id}/",
  });
};

/**
 *
 * Delete multiple additional items associated with a specific event identified by the `event_id` in the URL.
 * The `id` field is required to identify each additional item to be deleted.
 *
 */
export const organizerAdditionalItemsDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizerAdditionalItemsDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    OrganizerAdditionalItemsDeleteResponse,
    OrganizerAdditionalItemsDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/additional-items/{event_id}/",
  });
};

/**
 * Retrieve a list of distances associated with a specific event identified by the event_id passed in the URL.
 */
export const organizerDistancesRead = <ThrowOnError extends boolean = false>(
  options: Options<OrganizerDistancesReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizerDistancesReadResponse,
    OrganizerDistancesReadError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/distances/{event_id}/",
  });
};

/**
 * Create a new distance for an event. The event is identified by the event_id passed in the URL.
 */
export const organizerDistancesCreate = <ThrowOnError extends boolean = false>(
  options: Options<OrganizerDistancesCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    OrganizerDistancesCreateResponse,
    OrganizerDistancesCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/distances/{event_id}/",
  });
};

/**
 *
 * Update one or more distances for a specific event. The `event_id` is passed through the URL, and each distance
 * should have a valid `id` to identify which distance is being updated. All fields will be fully replaced with the new data.
 *
 */
export const organizerDistancesUpdate = <ThrowOnError extends boolean = false>(
  options: Options<OrganizerDistancesUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    OrganizerDistancesUpdateResponse,
    OrganizerDistancesUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/distances/{event_id}/",
  });
};

/**
 *
 * Partially update one or more distances associated with a specific event identified by the `event_id` in the URL.
 * You can update one or more fields of the distances. The `id` field is required to identify each distance to be updated.
 *
 */
export const organizerDistancesPartialUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizerDistancesPartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    OrganizerDistancesPartialUpdateResponse,
    OrganizerDistancesPartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/distances/{event_id}/",
  });
};

/**
 *
 * Delete multiple distances associated with a specific event identified by the `event_id` in the URL.
 * The `id` field is required to identify each distance to be deleted.
 *
 */
export const organizerDistancesDelete = <ThrowOnError extends boolean = false>(
  options: Options<OrganizerDistancesDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    OrganizerDistancesDeleteResponse,
    OrganizerDistancesDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/distances/{event_id}/",
  });
};

/**
 * Create a new event with all related details including organizer, additional items, and distances.
 */
export const organizerEventsCreate = <ThrowOnError extends boolean = false>(
  options: Options<OrganizerEventsCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    OrganizerEventsCreateResponse,
    OrganizerEventsCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/events/",
  });
};

/**
 * Retrieve event details by ID.
 */
export const organizerEventsRead = <ThrowOnError extends boolean = false>(
  options: Options<OrganizerEventsReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizerEventsReadResponse,
    OrganizerEventsReadError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/events/{id}/",
  });
};

/**
 * Update event details without organizer, additional_items, or distances fields.
 */
export const organizerEventsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<OrganizerEventsUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    OrganizerEventsUpdateResponse,
    OrganizerEventsUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/events/{id}/",
  });
};

/**
 * Partially update event details without organizer, additional_items, or distances fields.
 */
export const organizerEventsPartialUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizerEventsPartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    OrganizerEventsPartialUpdateResponse,
    OrganizerEventsPartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/events/{id}/",
  });
};

/**
 * Delete an event by ID.
 */
export const organizerEventsDelete = <ThrowOnError extends boolean = false>(
  options: Options<OrganizerEventsDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    OrganizerEventsDeleteResponse,
    OrganizerEventsDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/events/{id}/",
  });
};

export const organizerInviteModeratorCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizerInviteModeratorCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    OrganizerInviteModeratorCreateResponse,
    OrganizerInviteModeratorCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/invite-moderator/",
  });
};

export const organizerOrganizerEventsList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizerOrganizerEventsListResponse,
    OrganizerOrganizerEventsListError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/organizer-events/",
  });
};

export const organizerOrganizerEventsCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizerOrganizerEventsCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    OrganizerOrganizerEventsCreateResponse,
    OrganizerOrganizerEventsCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/organizer-events/",
  });
};

export const organizerOrganizerEventsRead = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizerOrganizerEventsReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizerOrganizerEventsReadResponse,
    OrganizerOrganizerEventsReadError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/organizer-events/{id}/",
  });
};

export const organizerOrganizerEventsUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizerOrganizerEventsUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    OrganizerOrganizerEventsUpdateResponse,
    OrganizerOrganizerEventsUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/organizer-events/{id}/",
  });
};

export const organizerOrganizerEventsPartialUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizerOrganizerEventsPartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    OrganizerOrganizerEventsPartialUpdateResponse,
    OrganizerOrganizerEventsPartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/organizer-events/{id}/",
  });
};

export const organizerOrganizerEventsDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizerOrganizerEventsDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    OrganizerOrganizerEventsDeleteResponse,
    OrganizerOrganizerEventsDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/organizer-events/{id}/",
  });
};

/**
 *
 * Registers a user for an event. The user is authenticated via JWT, and the event is identified by its ID.
 * The request body should include the event ID, a list of distance IDs the user wants to participate in, and optionally, additional item IDs.
 * The response will include the event registration details, such as the event ID, selected distances, additional items, registration date, and confirmation status.
 *
 */
export const registerUserForEvent = <ThrowOnError extends boolean = false>(
  options: Options<RegisterUserForEventData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RegisterUserForEventResponse,
    RegisterUserForEventError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/registrations/",
  });
};

/**
 *
 * Retrieves detailed information about a specific event registration, including user information, the selected event, distances, additional items, registration date, and whether the registration has been confirmed.
 *
 */
export const getEventRegistration = <ThrowOnError extends boolean = false>(
  options: Options<GetEventRegistrationData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetEventRegistrationResponse,
    GetEventRegistrationError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/registrations/{id}/",
  });
};

/**
 *
 * Updates the details of an existing event registration. You can change the distances the user is registered for, update additional items, or modify other registration details.
 * The event itself cannot be changed; only distances and additional items can be updated.
 *
 */
export const updateEventRegistration = <ThrowOnError extends boolean = false>(
  options: Options<UpdateEventRegistrationData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateEventRegistrationResponse,
    UpdateEventRegistrationError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/registrations/{id}/",
  });
};

/**
 *
 * Partially updates an existing event registration. This can include modifying the distances or additional items associated with the registration.
 * Only the fields provided in the request body will be updated.
 *
 */
export const partialUpdateEventRegistration = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PartialUpdateEventRegistrationData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    PartialUpdateEventRegistrationResponse,
    PartialUpdateEventRegistrationError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/registrations/{id}/",
  });
};

/**
 *
 * Deletes a specific event registration by its ID. This operation cannot be undone.
 *
 */
export const deleteEventRegistration = <ThrowOnError extends boolean = false>(
  options: Options<DeleteEventRegistrationData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteEventRegistrationResponse,
    DeleteEventRegistrationError,
    ThrowOnError
  >({
    ...options,
    url: "/organizer/registrations/{id}/",
  });
};

/**
 * Get upcoming events for the main page
 */
export const upcomingEventsList = <ThrowOnError extends boolean = false>(
  options?: Options<UpcomingEventsListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UpcomingEventsListResponse,
    UpcomingEventsListError,
    ThrowOnError
  >({
    ...options,
    url: "/upcoming-events/",
  });
};

/**
 * Get the first and last name of an authorized user or a stub for an unauthorized user, and their avatar URL if available
 */
export const userUserInfoList = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserUserInfoListResponse,
    UserUserInfoListError,
    ThrowOnError
  >({
    ...options,
    url: "/user/user-info/",
  });
};
