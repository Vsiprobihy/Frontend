// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import type {
  AuthenticationActivateReadData,
  AuthenticationActivateReadError,
  AuthenticationActivateReadResponse,
  AuthenticationLoginCreateData,
  AuthenticationLoginCreateError,
  AuthenticationLoginCreateResponse,
  AuthenticationRegisterCreateData,
  AuthenticationRegisterCreateError,
  AuthenticationRegisterCreateResponse,
  AuthenticationResetPasswordConfirmData,
  AuthenticationResetPasswordConfirmError,
  AuthenticationResetPasswordConfirmResponse,
  AuthenticationResetPasswordData,
  AuthenticationResetPasswordError,
  AuthenticationResetPasswordResponse,
  AuthenticationTokenRefreshCreateData,
  AuthenticationTokenRefreshCreateError,
  AuthenticationTokenRefreshCreateResponse,
  CustomAdminCompetitionTypeListData,
  CustomAdminCompetitionTypeListError,
  CustomAdminCompetitionTypeListResponse,
  CustomAdminCompetitionTypeCreateData,
  CustomAdminCompetitionTypeCreateError,
  CustomAdminCompetitionTypeCreateResponse,
  CustomAdminCompetitionTypeReadData,
  CustomAdminCompetitionTypeReadError,
  CustomAdminCompetitionTypeReadResponse,
  CustomAdminCompetitionTypeUpdateData,
  CustomAdminCompetitionTypeUpdateError,
  CustomAdminCompetitionTypeUpdateResponse,
  CustomAdminCompetitionTypeDeleteData,
  CustomAdminCompetitionTypeDeleteError,
  CustomAdminCompetitionTypeDeleteResponse,
  CustomAdminEventUpdateStatusListError,
  CustomAdminEventUpdateStatusListResponse,
  CustomAdminEventUpdateStatusCreateData,
  CustomAdminEventUpdateStatusCreateError,
  CustomAdminEventUpdateStatusCreateResponse,
  CustomAdminUserApproveOrganizerListError,
  CustomAdminUserApproveOrganizerListResponse,
  CustomAdminUserApproveOrganizerCreateData,
  CustomAdminUserApproveOrganizerCreateError,
  CustomAdminUserApproveOrganizerCreateResponse,
  OrganizationListError,
  OrganizationListResponse,
  OrganizationCreateData,
  OrganizationCreateError,
  OrganizationCreateResponse,
  OrganizationReadData,
  OrganizationReadError,
  OrganizationReadResponse,
  OrganizationUpdateData,
  OrganizationUpdateError,
  OrganizationUpdateResponse,
  OrganizationPartialUpdateData,
  OrganizationPartialUpdateError,
  OrganizationPartialUpdateResponse,
  OrganizationDeleteData,
  OrganizationDeleteError,
  OrganizationDeleteResponse,
  OrganizationEventListData,
  OrganizationEventListError,
  OrganizationEventListResponse,
  OrganizationEventCreateData,
  OrganizationEventCreateError,
  OrganizationEventCreateResponse,
  OrganizationEventReadData,
  OrganizationEventReadError,
  OrganizationEventReadResponse,
  OrganizationEventUpdateData,
  OrganizationEventUpdateError,
  OrganizationEventUpdateResponse,
  OrganizationEventPartialUpdateData,
  OrganizationEventPartialUpdateError,
  OrganizationEventPartialUpdateResponse,
  OrganizationEventDeleteData,
  OrganizationEventDeleteError,
  OrganizationEventDeleteResponse,
  OrganizationEventDistanceUserListData,
  OrganizationEventDistanceUserListError,
  OrganizationEventDistanceUserListResponse,
  OrganizationEventDistanceUserReadData,
  OrganizationEventDistanceUserReadError,
  OrganizationEventDistanceUserReadResponse,
  OrganizationEventDistanceUserCreateData,
  OrganizationEventDistanceUserCreateError,
  OrganizationEventDistanceUserCreateResponse,
  OrganizationEventDistanceUserUpdateData,
  OrganizationEventDistanceUserUpdateError,
  OrganizationEventDistanceUserUpdateResponse,
  OrganizationEventDistanceUserPartialUpdateData,
  OrganizationEventDistanceUserPartialUpdateError,
  OrganizationEventDistanceUserPartialUpdateResponse,
  OrganizationEventDistanceUserDeleteData,
  OrganizationEventDistanceUserDeleteError,
  OrganizationEventDistanceUserDeleteResponse,
  OrganizationInviteOrganizerCreateData,
  OrganizationInviteOrganizerCreateError,
  OrganizationInviteOrganizerCreateResponse,
  UserDistanceRegisterListData,
  UserDistanceRegisterListError,
  UserDistanceRegisterListResponse,
  UserDistanceRegisterCreateData,
  UserDistanceRegisterCreateError,
  UserDistanceRegisterCreateResponse,
  UserEventLikeListData,
  UserEventLikeListError,
  UserEventLikeListResponse,
  UserEventLikeCreateData,
  UserEventLikeCreateError,
  UserEventLikeCreateResponse,
  UserEventLikeDeleteData,
  UserEventLikeDeleteError,
  UserEventLikeDeleteResponse,
  UserProfileListError,
  UserProfileListResponse,
  UserProfileUpdateData,
  UserProfileUpdateError,
  UserProfileUpdateResponse,
  UserProfilePartialUpdateData,
  UserProfilePartialUpdateError,
  UserProfilePartialUpdateResponse,
  UserProfileAdditionalProfileListError,
  UserProfileAdditionalProfileListResponse,
  UserProfileAdditionalProfileCreateData,
  UserProfileAdditionalProfileCreateError,
  UserProfileAdditionalProfileCreateResponse,
  UserProfileAdditionalProfileReadData,
  UserProfileAdditionalProfileReadError,
  UserProfileAdditionalProfileReadResponse,
  UserProfileAdditionalProfileUpdateData,
  UserProfileAdditionalProfileUpdateError,
  UserProfileAdditionalProfileUpdateResponse,
  UserProfileAdditionalProfilePartialUpdateData,
  UserProfileAdditionalProfilePartialUpdateError,
  UserProfileAdditionalProfilePartialUpdateResponse,
  UserProfileAdditionalProfileDeleteData,
  UserProfileAdditionalProfileDeleteError,
  UserProfileAdditionalProfileDeleteResponse,
  UserPublicEventListError,
  UserPublicEventListResponse,
  UserPublicEventFilterListData,
  UserPublicEventFilterListError,
  UserPublicEventFilterListResponse,
  UserPublicEventReadData,
  UserPublicEventReadError,
  UserPublicEventReadResponse,
  UserRequestOrganizerCreateError,
  UserRequestOrganizerCreateResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Activate user by email
 */
export const authenticationActivateRead = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthenticationActivateReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    AuthenticationActivateReadResponse,
    AuthenticationActivateReadError,
    ThrowOnError
  >({
    ...options,
    url: "/authentication/activate/{uid}/{token}/",
  });
};

/**
 * Login with JWT token
 */
export const authenticationLoginCreate = <ThrowOnError extends boolean = false>(
  options: Options<AuthenticationLoginCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthenticationLoginCreateResponse,
    AuthenticationLoginCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/authentication/login/",
  });
};

/**
 * Register user with email and password
 */
export const authenticationRegisterCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthenticationRegisterCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthenticationRegisterCreateResponse,
    AuthenticationRegisterCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/authentication/register/",
  });
};

/**
 * Confirm and reset the user password.
 */
export const authenticationResetPasswordConfirm = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthenticationResetPasswordConfirmData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthenticationResetPasswordConfirmResponse,
    AuthenticationResetPasswordConfirmError,
    ThrowOnError
  >({
    ...options,
    url: "/authentication/reset-password-confirm/",
  });
};

/**
 * Request a password reset email.
 */
export const authenticationResetPassword = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthenticationResetPasswordData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthenticationResetPasswordResponse,
    AuthenticationResetPasswordError,
    ThrowOnError
  >({
    ...options,
    url: "/authentication/reset-password/",
  });
};

/**
 * Takes a refresh type JSON web token and returns an access type JSON web
 * token if the refresh token is valid.
 */
export const authenticationTokenRefreshCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthenticationTokenRefreshCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthenticationTokenRefreshCreateResponse,
    AuthenticationTokenRefreshCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/authentication/token/refresh/",
  });
};

/**
 * Get a Competition Type
 */
export const customAdminCompetitionTypeList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<CustomAdminCompetitionTypeListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CustomAdminCompetitionTypeListResponse,
    CustomAdminCompetitionTypeListError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/competition-type/",
  });
};

/**
 * Create a new Competition Type.
 */
export const customAdminCompetitionTypeCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CustomAdminCompetitionTypeCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CustomAdminCompetitionTypeCreateResponse,
    CustomAdminCompetitionTypeCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/competition-type/",
  });
};

/**
 * Get a Competition Type
 */
export const customAdminCompetitionTypeRead = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CustomAdminCompetitionTypeReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CustomAdminCompetitionTypeReadResponse,
    CustomAdminCompetitionTypeReadError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/competition-type/{competition_type_id}/",
  });
};

/**
 * Create a new Competition Type.
 */
export const customAdminCompetitionTypeUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CustomAdminCompetitionTypeUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    CustomAdminCompetitionTypeUpdateResponse,
    CustomAdminCompetitionTypeUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/competition-type/{competition_type_id}/",
  });
};

/**
 * Delete an additional profile
 */
export const customAdminCompetitionTypeDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CustomAdminCompetitionTypeDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    CustomAdminCompetitionTypeDeleteResponse,
    CustomAdminCompetitionTypeDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/competition-type/{competition_type_id}/",
  });
};

/**
 * Retrieve all events with status "pending".
 */
export const customAdminEventUpdateStatusList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CustomAdminEventUpdateStatusListResponse,
    CustomAdminEventUpdateStatusListError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/event/update-status/",
  });
};

/**
 * Update the status of an event by its ID.
 */
export const customAdminEventUpdateStatusCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CustomAdminEventUpdateStatusCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CustomAdminEventUpdateStatusCreateResponse,
    CustomAdminEventUpdateStatusCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/event/{event_id}/update-status/",
  });
};

/**
 * Retrieve all pending organizer requests.
 */
export const customAdminUserApproveOrganizerList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    CustomAdminUserApproveOrganizerListResponse,
    CustomAdminUserApproveOrganizerListError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/user/approve-organizer/",
  });
};

/**
 * Approve Organizer
 */
export const customAdminUserApproveOrganizerCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CustomAdminUserApproveOrganizerCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CustomAdminUserApproveOrganizerCreateResponse,
    CustomAdminUserApproveOrganizerCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/custom-admin/user/{user_id}/approve-organizer/",
  });
};

/**
 * Retrieve a list of organizations with pagination.
 */
export const organizationList = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizationListResponse,
    OrganizationListError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/",
  });
};

/**
 * Update the details of an event organizer by event_id. The event_id is used to find the organizer, and the request body contains the updated information about the organizer.
 */
export const organizationCreate = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    OrganizationCreateResponse,
    OrganizationCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/",
  });
};

/**
 * Retrieve a list of organizations with pagination.
 */
export const organizationRead = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizationReadResponse,
    OrganizationReadError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/",
  });
};

/**
 * Update the details of an event organizer by event_id. The event_id is used to find the organizer, and the request body contains the updated information about the organizer.
 */
export const organizationUpdate = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    OrganizationUpdateResponse,
    OrganizationUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/",
  });
};

/**
 * Partially update an event organizer by event_id. Only the fields provided in the request body will be updated.
 */
export const organizationPartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationPartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    OrganizationPartialUpdateResponse,
    OrganizationPartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/",
  });
};

/**
 * Delete an event organizer by event_id. The event_id is used to find and delete the organizer associated with a specific event.
 */
export const organizationDelete = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    OrganizationDeleteResponse,
    OrganizationDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/",
  });
};

/**
 * Retrieve event list with pagination and details.
 */
export const organizationEventList = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationEventListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizationEventListResponse,
    OrganizationEventListError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/",
  });
};

/**
 * Create a new event with all related details including organizer, additional items, and distances.
 */
export const organizationEventCreate = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationEventCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    OrganizationEventCreateResponse,
    OrganizationEventCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/",
  });
};

/**
 * Retrieve event details by ID.
 */
export const organizationEventRead = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationEventReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizationEventReadResponse,
    OrganizationEventReadError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/{event_id}/",
  });
};

/**
 * Update event details without organizer, additional_items, or distances fields.
 */
export const organizationEventUpdate = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationEventUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    OrganizationEventUpdateResponse,
    OrganizationEventUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/{event_id}/",
  });
};

/**
 * Partially update event details without organizer, additional_items, or distances fields.
 */
export const organizationEventPartialUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizationEventPartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    OrganizationEventPartialUpdateResponse,
    OrganizationEventPartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/{event_id}/",
  });
};

/**
 * Delete an event by ID.
 */
export const organizationEventDelete = <ThrowOnError extends boolean = false>(
  options: Options<OrganizationEventDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    OrganizationEventDeleteResponse,
    OrganizationEventDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/{event_id}/",
  });
};

/**
 * Retrieve the list of users
 */
export const organizationEventDistanceUserList = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizationEventDistanceUserListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizationEventDistanceUserListResponse,
    OrganizationEventDistanceUserListError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/{event_id}/distance/{distance_id}/user/",
  });
};

/**
 * Retrieve the users
 */
export const organizationEventDistanceUserRead = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizationEventDistanceUserReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    OrganizationEventDistanceUserReadResponse,
    OrganizationEventDistanceUserReadError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/{event_id}/distance/{distance_id}/user/{user_id}/",
  });
};

export const organizationEventDistanceUserCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizationEventDistanceUserCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    OrganizationEventDistanceUserCreateResponse,
    OrganizationEventDistanceUserCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/{event_id}/distance/{distance_id}/user/{user_id}/",
  });
};

/**
 * Update the details of user
 */
export const organizationEventDistanceUserUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizationEventDistanceUserUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    OrganizationEventDistanceUserUpdateResponse,
    OrganizationEventDistanceUserUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/{event_id}/distance/{distance_id}/user/{user_id}/",
  });
};

/**
 * Partially update an user by user_id. Only the fields provided in the request body will be updated.
 */
export const organizationEventDistanceUserPartialUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizationEventDistanceUserPartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    OrganizationEventDistanceUserPartialUpdateResponse,
    OrganizationEventDistanceUserPartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/{event_id}/distance/{distance_id}/user/{user_id}/",
  });
};

/**
 * Delete an event organizer by event_id. The event_id is used to find and delete the organizer associated with a specific event.
 */
export const organizationEventDistanceUserDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizationEventDistanceUserDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    OrganizationEventDistanceUserDeleteResponse,
    OrganizationEventDistanceUserDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/event/{event_id}/distance/{distance_id}/user/{user_id}/",
  });
};

/**
 * Send an invitation to an organizer by email. The email address of the organizer is provided in the request body.
 */
export const organizationInviteOrganizerCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OrganizationInviteOrganizerCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    OrganizationInviteOrganizerCreateResponse,
    OrganizationInviteOrganizerCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/organization/{organization_id}/invite-organizer/",
  });
};

/**
 * Get all registrations of the authenticated user. Use "status" query parameter to filter:
 * - "active" for active registrations
 * - "archive" for archived registrations
 */
export const userDistanceRegisterList = <ThrowOnError extends boolean = false>(
  options?: Options<UserDistanceRegisterListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserDistanceRegisterListResponse,
    UserDistanceRegisterListError,
    ThrowOnError
  >({
    ...options,
    url: "/user/distance/register/",
  });
};

/**
 * User Distance Registration
 */
export const userDistanceRegisterCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserDistanceRegisterCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UserDistanceRegisterCreateResponse,
    UserDistanceRegisterCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/distance/{distance_id}/register/",
  });
};

/**
 * Retrieve a list of liked events with pagination
 */
export const userEventLikeList = <ThrowOnError extends boolean = false>(
  options?: Options<UserEventLikeListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserEventLikeListResponse,
    UserEventLikeListError,
    ThrowOnError
  >({
    ...options,
    url: "/user/event/like/",
  });
};

/**
 * Like an event by its ID
 */
export const userEventLikeCreate = <ThrowOnError extends boolean = false>(
  options: Options<UserEventLikeCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UserEventLikeCreateResponse,
    UserEventLikeCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/event/{event_id}/like/",
  });
};

/**
 * Unlike an event by its ID
 */
export const userEventLikeDelete = <ThrowOnError extends boolean = false>(
  options: Options<UserEventLikeDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    UserEventLikeDeleteResponse,
    UserEventLikeDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/user/event/{event_id}/like/",
  });
};

/**
 * Get user profile data
 */
export const userProfileList = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserProfileListResponse,
    UserProfileListError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/",
  });
};

/**
 * Update user profile data
 */
export const userProfileUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UserProfileUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UserProfileUpdateResponse,
    UserProfileUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/",
  });
};

/**
 * Partial update of user profile data
 */
export const userProfilePartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UserProfilePartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    UserProfilePartialUpdateResponse,
    UserProfilePartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/",
  });
};

/**
 * Get a list of additional profiles
 */
export const userProfileAdditionalProfileList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserProfileAdditionalProfileListResponse,
    UserProfileAdditionalProfileListError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/additional-profile/",
  });
};

/**
 * Create an additional profile
 */
export const userProfileAdditionalProfileCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserProfileAdditionalProfileCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UserProfileAdditionalProfileCreateResponse,
    UserProfileAdditionalProfileCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/additional-profile/",
  });
};

/**
 * Get an additional profile
 */
export const userProfileAdditionalProfileRead = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserProfileAdditionalProfileReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserProfileAdditionalProfileReadResponse,
    UserProfileAdditionalProfileReadError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/additional-profile/{profile_id}/",
  });
};

/**
 * Update an additional profile
 */
export const userProfileAdditionalProfileUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserProfileAdditionalProfileUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UserProfileAdditionalProfileUpdateResponse,
    UserProfileAdditionalProfileUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/additional-profile/{profile_id}/",
  });
};

/**
 * Partially update an additional profile
 */
export const userProfileAdditionalProfilePartialUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserProfileAdditionalProfilePartialUpdateData, ThrowOnError>
) => {
  return (options?.client ?? client).patch<
    UserProfileAdditionalProfilePartialUpdateResponse,
    UserProfileAdditionalProfilePartialUpdateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/additional-profile/{profile_id}/",
  });
};

/**
 * Delete an additional profile
 */
export const userProfileAdditionalProfileDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserProfileAdditionalProfileDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    UserProfileAdditionalProfileDeleteResponse,
    UserProfileAdditionalProfileDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/user/profile/additional-profile/{profile_id}/",
  });
};

/**
 * Retrieve a detailed list of events with pagination.
 */
export const userPublicEventList = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserPublicEventListResponse,
    UserPublicEventListError,
    ThrowOnError
  >({
    ...options,
    url: "/user/public-event/",
  });
};

/**
 * Filtering events by competition type, name, location, distance, and date range
 */
export const userPublicEventFilterList = <ThrowOnError extends boolean = false>(
  options?: Options<UserPublicEventFilterListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserPublicEventFilterListResponse,
    UserPublicEventFilterListError,
    ThrowOnError
  >({
    ...options,
    url: "/user/public-event/filter/",
  });
};

/**
 * Retrieve detailed information about a specific event by its ID.
 */
export const userPublicEventRead = <ThrowOnError extends boolean = false>(
  options: Options<UserPublicEventReadData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    UserPublicEventReadResponse,
    UserPublicEventReadError,
    ThrowOnError
  >({
    ...options,
    url: "/user/public-event/{event_id}/",
  });
};

/**
 * Request Organizer
 */
export const userRequestOrganizerCreate = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UserRequestOrganizerCreateResponse,
    UserRequestOrganizerCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/user/request-organizer/",
  });
};
